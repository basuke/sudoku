from sudoku.model import cell, Board
from sudoku.solver import Solver
from sudoku.finder.last_cell import LastCellFinder
from sudoku.finder.last_number import LastNumberFinder
from sudoku.finder.aligned_boxes import AlignedBoxesFinder
from sudoku.finder.each_box import EachBoxFinder
from sudoku.finder.one_choice import OneChoiceFinder
from sudoku.finder.constraint import ConstraintFinder
from sudoku.test.sample import EASY1

boards = [
    EASY1,
    """
    8 7 . | . 1 4 | 6 . .
    6 . . | . . 2 | 3 . .
    . . . | . . . | 1 5 8
    ------+-------+------
    . . . | . . . | . 2 6
    7 . . | . . . | . . 4
    3 5 . | . . . | . . .
    ------+-------+------
    5 1 2 | . . . | . . .
    . . 3 | 7 . . | . . 5
    . . 7 | 5 3 . | . 8 9
    """,
    """
    . . . | . . . | . 2 3
    1 . 6 | 3 . 7 | . 4 8
    4 . . | . . 1 | . . .
    ------+-------+------
    9 . 7 | 5 . 8 | . . .
    . . . | . . . | . . .
    . . . | 6 . 3 | 5 . 9
    ------+-------+------
    . . . | 7 . . | . . 5
    7 4 . | 8 . 5 | 3 . 6
    2 9 . | . . . | . . .
    """,
    """
    . 1 . | 6 . 3 | . 5 .
    9 . . | . 1 . | . . 4
    . . 8 | . . . | 2 . .
    ------+-------+------
    4 . . | . . . | . . 7
    . 7 . | . 6 . | . 3 .
    8 . . | . . . | . . 9
    ------+-------+------
    . . 6 | . . . | 4 . .
    7 . . | . 5 . | . . 2
    . 9 . | 8 . 7 | . 1 .
    """,
]

hard4 = [
    """
    . 4 . | 1 . . | . . .
    7 . . | . . 9 | . . 8
    . . 6 | . . . | 4 . .
    ------+-------+------
    . 7 . | . 1 . | . . .
    3 . . | 8 . 6 | . . 7
    . . . | . 5 . | . 9 .
    ------+-------+------
    . . 4 | . . . | 3 . .
    9 . . | 7 . . | . . 2
    . . . | . . 4 | . 6 .
    """,
    """
    . . 2 | . 1 . | . . 4
    . 8 . | . . . | 5 . .
    5 . . | . . 3 | . 7 .
    ------+-------+------
    . . . | . . 2 | 3 . .
    4 . . | . 9 . | . . 6
    . . 1 | 8 . . | . . .
    ------+-------+------
    . 2 . | 5 . . | . . 1
    . . 8 | . . . | . 6 .
    6 . . | . 4 . | 9 . .
    """,
    """
    . 6 . | . 4 2 | . . 7
    3 . . | 7 . . | . . .
    . . 8 | . . . | 9 . .
    ------+-------+------
    2 . . | . . . | . 7 .
    . 7 . | . 1 . | . 8 .
    . 4 . | . . . | . . 1
    ------+-------+------
    . . 5 | . . . | 4 . .
    . . . | . . 9 | . . 8
    1 . . | 5 6 . | . 9 .
    """,
    """
    . 6 . | . . 8 | . . 7
    . . . | . . 2 | 8 . .
    . . 1 | 4 . . | . . .
    ------+-------+------
    5 . . | 8 . . | . . .
    4 1 . | . . . | . 3 5
    . . . | . . 6 | . . 2
    ------+-------+------
    . . . | . . 5 | 1 . .
    . . 4 | 6 . . | . . .
    3 . . | 2 . . | . 5 .
    """,
    """
    . 1 . | . . 6 | . . .
    . . 2 | . . . | 9 4 .
    6 . . | 3 . . | . . 7
    ------+-------+------
    5 . . | . 4 . | . . .
    . 8 6 | . . . | 2 7 .
    . . . | . 6 . | . . 3
    ------+-------+------
    9 . . | . . 7 | . . 4
    . 4 1 | . . . | 8 . .
    . . . | 8 . . | . 9 .
    """,
    """
    . . . | . 6 . | . 8 1
    . . . | . . . | . . 4
    . 2 9 | . . 5 | . . .
    ------+-------+------
    . . . | 3 . . | . 7 6
    . . 5 | . . . | 1 . .
    7 4 . | . . 9 | . . .
    ------+-------+------
    . . . | 5 . . | 2 3 .
    3 . . | . . . | . . .
    8 6 . | . 7 . | . . .
    """,
    """
    . . . | . 3 2 | . . .
    . . 6 | . . . | . 4 .
    . 9 . | 7 . . | 3 . 1
    ------+-------+------
    . . 8 | . . . | . 2 .
    . . . | . 5 . | . . .
    . 5 . | . . . | 7 . .
    ------+-------+------
    4 . 2 | . . 8 | . 6 .
    . 3 . | . . . | 5 . .
    . . . | 6 7 . | . . .
    """,
    """
    . . . | . . 3 | 8 . .
    . 7 8 | . . 1 | . . .
    . 3 . | 8 . . | . . 5
    ------+-------+------
    . . 9 | . 6 . | . 1 2
    . . . | 2 . 4 | . . .
    1 2 . | . 9 . | 6 . .
    ------+-------+------
    3 . . | . . 2 | . 9 .
    . . . | 6 . . | 4 7 .
    . . 5 | 4 . . | . . .
    """,
    """
    . . 1 | . 6 . | . 7 5
    . 2 . | . . 7 | . . 6
    3 . . | . . . | 4 . .
    ------+-------+------
    . . . | 4 . . | . . 3
    . 9 . | . 5 . | . 6 .
    8 . . | . . 6 | . . .
    ------+-------+------
    . . 8 | . . . | . . 7
    5 . . | 2 . . | . 8 .
    2 3 . | . 7 . | 9 . .
    """,
]

finders = [
    LastCellFinder(),
    LastNumberFinder(),
    AlignedBoxesFinder(),
    EachBoxFinder(),
    AlignedBoxesFinder(extra=True),
    OneChoiceFinder(),
    ConstraintFinder(),
    EachBoxFinder(),
    AlignedBoxesFinder(extra=True),
    OneChoiceFinder(),
]

verbose = True

for numbers in hard4:
    board = Board(numbers)
    solver = Solver(board, finders)

    solver.solve(verbose=verbose)

    if not board.is_complete:
        if not verbose:
            print Board(numbers)

            for result in solver.steps:
                print result

            print board
        break

    print
